// Get breakpoint value by name
@function breakpoint($breakpoint-name) {
    $breakpoint-value: map-get($breakpoints, $breakpoint-name);

    @if $breakpoint-value {
        @return $breakpoint-value;
    }

    @return null;
}

// Create a media query for a breakpoint name
@mixin respond-above($breakpoint-name) {
    $breakpoint-value: breakpoint($breakpoint-name);

    @if $breakpoint-value {
        @media screen and (min-width: $breakpoint-value) {
            @content;
        }
    }
}

@function rwd-typographic-scale($scale, $breakpoint) {
    $typography-data: map-get($rwd-typography, $breakpoint);
    $breakpoint-base-font-size: map-get($typography-data, base-font-size);
    $breakpoint-type-scale: map-get($typography-data, type-scale);
    $breakpoint-vertical-rhythm: map-get($typography-data, vertical-rhythm);

    // Calculate font size
    $font-size: $breakpoint-base-font-size;
    @if $scale > 0 {
        @for $i from 1 to $scale {
            $font-size: round($font-size * $breakpoint-type-scale);
        }
    }
    @else {
        @for $i from 1 to $scale {
            $font-size: round($font-size / $breakpoint-type-scale);
        }
    }

    // Calculate line-height
    $base-vertical-rhythm: $breakpoint-base-font-size * $breakpoint-vertical-rhythm;
    $line-height: round($font-size / $base-vertical-rhythm) * $base-vertical-rhythm / $font-size;
    @if ($line-height < 1) {
        $line-height: 1;
    }

    // Calculate margins
    $margin: round($line-height * $font-size);

    // Build list to return
    $list: join($scale, $breakpoint-base-font-size);
    $list: join($list, $font-size);
    $list: append($list, $line-height);
    $list: append($list, $margin);

    @return $list;
}


@mixin rwd-typographic-margin($scale) {
    @each $breakpoint, $data in $rwd-typography {
        $breakpoint-value: breakpoint($breakpoint);
        $generated-values: rwd-typographic-scale($scale, $breakpoint);

        $font-size: nth($generated-values, 3);
        $margin: nth($generated-values, 5);

        @if $breakpoint-value {
            @media screen and (min-width: $breakpoint-value) {
                margin-top: 0;
                margin-bottom: em($margin, $font-size);
            }
        } @else {
            margin-top: 0;
            margin-bottom: em($margin, $font-size);
        }
    }
}

@mixin rwd-typographic-scale($scale, $displayMargin: true) {
    @each $breakpoint, $data in $rwd-typography {
        $breakpoint-value: breakpoint($breakpoint);
        $generated-values: rwd-typographic-scale($scale, $breakpoint);

        $base-font-size: nth($generated-values, 2);
        $font-size: nth($generated-values, 3);
        $line-height: nth($generated-values, 4);
        $margin: nth($generated-values, 5);

        @if $breakpoint-value {
            @media screen and (min-width: $breakpoint-value) {
                font-size: em($font-size);
                line-height: $line-height;
                @if $displayMargin {
                    margin-top: 0;
                    margin-bottom: em($margin, $font-size);
                }
            }
        } @else {
            font-size: em($font-size);
            line-height: $line-height;
            @if $displayMargin {
                margin-top: 0;
                margin-bottom: em($margin, $font-size);;
            }
        }
    }
}

//@function rwd-label-scale($label) {
//    @return index($rwd-scale-labels, $label);
//}
//$rwd-scale-labels: (type1, type2, type3, type4, type4);
//// Generate placeholder for each responsive typography label
//@each $rwd-label in $rwd-scale-labels {
//    %#{$rwd-label} {
//        // Output the correct font properties for the given scale
//        @include rwd-typographic-scale(rwd-label-scale($rwd-label));
//    }
//}
